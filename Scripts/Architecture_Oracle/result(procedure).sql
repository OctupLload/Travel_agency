/*
    BEGIN 
        p_create_all('CUSTOMERS');
    END;
*/

CREATE OR REPLACE PACKAGE PKG_CUSTOMERS AS
		PROCEDURE p_create(P_NEW_LAST_NAME IN CUSTOMERS.LAST_NAME%TYPE,
P_NEW_FIRST_NAME IN CUSTOMERS.FIRST_NAME%TYPE,
P_NEW_SURNAME IN CUSTOMERS.SURNAME%TYPE,
P_NEW_BIRTHDATE IN CUSTOMERS.BIRTHDATE%TYPE,
				P_NEW_PHONE_NUMBER IN CUSTOMERS.PHONE_NUMBER%TYPE);
		PROCEDURE p_read;
		PROCEDURE p_update(P_CUSTOMER_ID IN CUSTOMERS.CUSTOMER_ID%TYPE,
				P_NEW_LAST_NAME IN CUSTOMERS.LAST_NAME%TYPE,
				P_NEW_FIRST_NAME IN CUSTOMERS.FIRST_NAME%TYPE,
				P_NEW_SURNAME IN CUSTOMERS.SURNAME%TYPE,
				P_NEW_BIRTHDATE IN CUSTOMERS.BIRTHDATE%TYPE,
				P_NEW_PHONE_NUMBER IN CUSTOMERS.PHONE_NUMBER%TYPE);
		PROCEDURE p_delete(P_CUSTOMER_ID IN CUSTOMERS.CUSTOMER_ID%TYPE);
END PKG_CUSTOMERS;
/

CREATE OR REPLACE PACKAGE BODY PKG_CUSTOMERS AS

		PROCEDURE p_create(P_NEW_LAST_NAME IN CUSTOMERS.LAST_NAME%TYPE,
P_NEW_FIRST_NAME IN CUSTOMERS.FIRST_NAME%TYPE,
P_NEW_SURNAME IN CUSTOMERS.SURNAME%TYPE,
P_NEW_BIRTHDATE IN CUSTOMERS.BIRTHDATE%TYPE,
				P_NEW_PHONE_NUMBER IN CUSTOMERS.PHONE_NUMBER%TYPE)
			IS
		null_err EXCEPTION;
	BEGIN
	IF (P_NEW_LAST_NAME IS NOT NULL AND
P_NEW_FIRST_NAME IS NOT NULL AND
P_NEW_SURNAME IS NOT NULL AND
P_NEW_BIRTHDATE IS NOT NULL AND
P_NEW_PHONE_NUMBER IS NOT NULL) THEN 
INSERT INTO ( LAST_NAME,  FIRST_NAME,  SURNAME,  BIRTHDATE,  PHONE_NUMBER)
 VALUES (P_NEW_LAST_NAME, P_NEW_FIRST_NAME, P_NEW_SURNAME, P_NEW_BIRTHDATE, P_NEW_PHONE_NUMBER);
COMMIT;
DBMS_OUTPUT.put_line('0: Record inserted successfully');
ELSE 
RAISE null_err;
END IF;
EXCEPTION
WHEN null_err THEN
DBMS_OUTPUT.put_line('The value is NULL. Enter the correct value');
WHEN OTHERS THEN
DBMS_OUTPUT.put_line(SQLCODE || ' : ' || SQLERRM);
END p_create;

		PROCEDURE p_read
			IS
	CURSOR CUR_READ IS 
SELECT CUSTOMER_ID,LAST_NAME, FIRST_NAME, SURNAME, BIRTHDATE, PHONE_NUMBER
FROM CUSTOMERS;
V_CUSTOMER_ID CUSTOMERS.CUSTOMER_ID%TYPE;
V_LAST_NAME CUSTOMERS.LAST_NAME%TYPE;
V_FIRST_NAME CUSTOMERS.FIRST_NAME%TYPE;
V_SURNAME CUSTOMERS.SURNAME%TYPE;
V_BIRTHDATE CUSTOMERS.BIRTHDATE%TYPE;
V_PHONE_NUMBER CUSTOMERS.PHONE_NUMBER%TYPE;
	BEGIN

OPEN CUR_READ;
LOOP
FETCH CUR_READ
INTO V_CUSTOMER_ID,  V_LAST_NAME,  V_FIRST_NAME,  V_SURNAME,  V_BIRTHDATE,  V_PHONE_NUMBER;
EXIT WHEN CUR_READ%NOTFOUND;
DBMS_OUTPUT.put_line(V_CUSTOMER_ID||'  '||V_LAST_NAME||'  '|| V_FIRST_NAME||'  '|| V_SURNAME||'  '|| V_BIRTHDATE||'  '|| V_PHONE_NUMBER);
END LOOP;
CLOSE CUR_READ;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
END P_READ;

		PROCEDURE p_update(P_CUSTOMER_ID IN CUSTOMERS.CUSTOMER_ID%TYPE,
				P_NEW_LAST_NAME IN CUSTOMERS.LAST_NAME%TYPE,
				P_NEW_FIRST_NAME IN CUSTOMERS.FIRST_NAME%TYPE,
				P_NEW_SURNAME IN CUSTOMERS.SURNAME%TYPE,
				P_NEW_BIRTHDATE IN CUSTOMERS.BIRTHDATE%TYPE,
				P_NEW_PHONE_NUMBER IN CUSTOMERS.PHONE_NUMBER%TYPE)
			IS
		null_err EXCEPTION;
	BEGIN
	IF (P_NEW_LAST_NAME IS NOT NULL AND
P_NEW_FIRST_NAME IS NOT NULL AND
P_NEW_SURNAME IS NOT NULL AND
P_NEW_BIRTHDATE IS NOT NULL AND
P_NEW_PHONE_NUMBER IS NOT NULL) THEN 

UPDATE CUSTOMERS
SET LAST_NAME = P_NEW_LAST_NAME,
FIRST_NAME = P_NEW_FIRST_NAME,
SURNAME = P_NEW_SURNAME,
BIRTHDATE = P_NEW_BIRTHDATE,
PHONE_NUMBER = P_NEW_PHONE_NUMBER
WHERE CUSTOMER_ID = P_CUSTOMER_ID;

COMMIT;
DBMS_OUTPUT.put_line('0: Record updated successfully');
ELSE 
RAISE null_err;
END IF;
EXCEPTION
WHEN null_err THEN
DBMS_OUTPUT.put_line('The value is NULL. Enter the correct value');
WHEN OTHERS THEN
DBMS_OUTPUT.put_line(SQLCODE || ' : ' || SQLERRM);
END p_update;

PROCEDURE p_delete(P_CUSTOMER_ID IN CUSTOMERS.CUSTOMER_ID%TYPE)
IS
null_err EXCEPTION;
BEGIN
IF p_CUSTOMER_ID IS NOT NULL THEN
DELETE FROM CUSTOMERS
WHERE CUSTOMER_ID = p_CUSTOMER_ID;
COMMIT;
DBMS_OUTPUT.put_line('0: Record deleted successfully');
ELSE
RAISE null_err;
END IF;
EXCEPTION
WHEN null_err THEN
DBMS_OUTPUT.put_line('The value is NULL. Enter the correct value');
WHEN OTHERS THEN
DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
END p_delete;
END PKG_CUSTOMERS;
/
